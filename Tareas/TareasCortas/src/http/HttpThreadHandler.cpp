// Copyright 2021 Luis Eduardo Rojas. Universidad de Costa Rica. CC BY 4.0
#include "HttpThreadHandler.hpp"

HttpThreadHandler::HttpThreadHandler(std::vector <HttpAplication*> *vector) {
  this->apps = vector;
}

HttpThreadHandler::~HttpThreadHandler() {
  delete apps;
}

int HttpThreadHandler::run() {
  this->consumeForever();
  return EXIT_SUCCESS;
}

void HttpThreadHandler::consume(Socket sock) {
  HttpRequest *request = new HttpRequest();
  request->load(sock);
  HttpResponse *response = new HttpResponse();
  bool respuesta = findApp(request, response);
  if (!respuesta) {
    const char* const SERVER_NAME = "WebServer";
    std::ostringstream message;
    std::ostringstream head;
    message << "<!DOCTYPE html><html lang=\"en\"><meta charset=\"ascii\"/>";
    message << "<title>NOT FOUND!</title><h1>";
    message << request->NOT_FOUND_404 << " NOT FOUND" << "</h1>";
    message << "<hr><p>Generated by " << SERVER_NAME << "</p></html>";
    message << "<pre>" << "Request Solicitado:" << "</pre></html>";
    message << "<pre>" << "Host: " << request->findMap("Host");
    message << "</pre></html>";
    message << "<pre>" << "Accept: " << request->findMap("Accept");
    message << "</pre></html>";
    message << "<pre>" << "User-Agent: " << request->findMap("User-Agent");
    message << "</pre></html>";
    message << "<pre>" << "Uri solicitado: " << request->getUri();
    message << "</pre></html>";

    head << "HTTP/1.0 404 NOT_FOUND\r\n";
    head << "Server: " << SERVER_NAME << "\r\n";
    head << "Content-Type: text/html; charset=ascii\r\n";
    head << "Content-Length: " << message.str().length() << "\r\n";
    head << "\r\n";

    response->addBody(head.str());
    response->addBody(message.str());
    delete SERVER_NAME;
  }
  response->send(sock);
  delete request;
  delete response;
}

bool HttpThreadHandler::findApp(HttpRequest *httpr, HttpResponse *httpres) {
  std::vector<HttpAplication*>::iterator it;
  bool encontrado = false;
  for (it = apps->begin(); (it != apps->end()) && (!encontrado); ++it) {
    HttpAplication *app = *it;
    if (app->verifyRequest(httpr, httpres)) {
     encontrado = true;
    }
  }
  return encontrado;
}
